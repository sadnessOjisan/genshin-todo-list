---
import { KEYS, Vocabulary } from "../data/todo";

export interface Props {
  lang: string;
  data: Vocabulary;
}

const { lang, data } = Astro.props as Props; // FIXME: without `as`, it fails typing.
---

<script>
  const checkboxes = document.querySelectorAll("input[type='checkbox']");
  checkboxes.forEach((checkbox) => {
    checkbox.addEventListener("change", (e) => {
      if (e.target === null || !(e.target instanceof HTMLInputElement)) {
        throw new Error("");
      }
      console.log(e.target.value);
    });
  });
</script>

<div>
  <h2>daily</h2>
  <label for={KEYS.JUSHI}>{data.jushi}</label>
  <input name="todo" id={KEYS.JUSHI} type="checkbox" value={KEYS.JUSHI} />
  <label for={KEYS.MISSION1}>{data.mission1}</label>
  <input name="todo" id={KEYS.MISSION1} type="checkbox" value={KEYS.MISSION1} />
  <label for={KEYS.MISSION2}>{data.mission2}</label>
  <input name="todo" id={KEYS.MISSION2} type="checkbox" value={KEYS.MISSION2} />
  <label for={KEYS.MISSION3}>{data.mission3}</label>
  <input name="todo" id={KEYS.MISSION3} type="checkbox" value={KEYS.MISSION3} />
  <label for={KEYS.MISSION4}>{data.mission4}</label>
  <input name="todo" id={KEYS.MISSION4} type="checkbox" value={KEYS.MISSION4} />

  <h2>weekly</h2>
  <label for={KEYS.WEEKLY_BOSS1}>{data.weekly_boss1}</label>
  <input id={KEYS.WEEKLY_BOSS1} type="checkbox" value={KEYS.WEEKLY_BOSS1} />
  <label for={KEYS.WEEKLY_BOSS2}>{data.weekly_boss2}</label>
  <input id={KEYS.WEEKLY_BOSS2} type="checkbox" value={KEYS.WEEKLY_BOSS2} />
  <label for={KEYS.WEEKLY_BOSS3}>{data.weekly_boss3}</label>
  <input id={KEYS.WEEKLY_BOSS3} type="checkbox" value={KEYS.WEEKLY_BOSS3} />
</div>

<style>
  .link-card {
    list-style: none;
    display: flex;
    padding: 0.25rem;
    background-color: white;
    background-image: none;
    background-size: 400%;
    border-radius: 0.6rem;
    background-position: 100%;
    transition: background-position 0.6s cubic-bezier(0.22, 1, 0.36, 1);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),
      0 2px 4px -2px rgba(0, 0, 0, 0.1);
  }

  .link-card > a {
    width: 100%;
    text-decoration: none;
    line-height: 1.4;
    padding: 1rem 1.3rem;
    border-radius: 0.35rem;
    color: #111;
    background-color: white;
    opacity: 0.8;
  }
  h2 {
    margin: 0;
    font-size: 1.25rem;
    transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
  }
  p {
    margin-top: 0.5rem;
    margin-bottom: 0;
    color: #444;
  }
  .link-card:is(:hover, :focus-within) {
    background-position: 0;
    background-image: var(--accent-gradient);
  }
  .link-card:is(:hover, :focus-within) h2 {
    color: rgb(var(--accent));
  }
</style>
